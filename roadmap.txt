Client Features:
1. Create, Delete content containers (via: UI & keyboard)
2. Move, Size,  [[maybe: Rotate
3. Text Edit (via: Keyboard & UI)
- group (drag on screen to create a new parent for the captured elements) ::container.grouping
- select (drag on screen to select containers) ::container.select
- change ownership (change parent to grandparent or sibling) ::container.lineage
- insert content (img, video, svg, etc)
- link containers 
- collapse (a means of sumarizing a container by making is much smaller and displaying a summary of what it contains) (via: Keyboard, crude)
- customize container style  (shape, color, border, width, heght nature (e.g. % or px or inherit))
- customize container content arrangement
--------------------------------------------

Current Prios:
[core]: [must-have] when creating within a parent, or changing parents - have the child conform to parent rules by default 
(e.g. respect parent stylign suggesionts)

[text-editor]: BUG: fix forward deletion
 -> activate text editor only after keyboard event?
 -> Bug when text editing nested child sometimes the editor focuses on parent, but text shows on child

[ISSUE]: application interacting with each other. e.g. grouper & change pos
[BUG]: some interface content still gets persisted...
[BUG]: broken repell direction
- [must have] introduce a focus concept: when you click on a container it is in focus, do something else and you lose focus
- [must have] way to send things to back and bring them forward (context menu)
- [must have] fix linker 
- [should have] finish content importer
- [nice to have] create aligner
- [nice to have] drag on screen to select
- [nice to have] minimap
- [nice to have] collaborators & follow
- [should have] Authentication
- [should consider] Cnosider having local and global permissions. Local don't get propagated to others or persisted, global are persisted and propagated.

Current purpose:
Serve as a view controller for my newsstand application. 
It will receive updates in the form of HTML news bits which will get displayed on screen

Next Purpose:
Grow into a diagraming tool to represent systems

Stretch purpose:
Create 'living' diagrams (that can update themselves with status information) 
or even intaractive dashboards
Don't know for sure yet if this is feasable... (there are existing tools for such things already)

Client
-------------------------
* ContainerCollapser - a way to collapse containers in a smart way in order to enable a big picture & detailed picture view of the document
Nice to have, maybe in the future whenever i have time:
TextInjector - [status: Partial implementation]
- Event System Wrapper (integrated with socket)
ContainerMove
ContainerSize - no mobile
ContainerStyle (css tags)
ContentConfig (choose things like position: relative, etc, wrapping)
[core] AppManager (Load/Unload Start/Stop)
- download app interfaces from Server (html, css)
- container actions: name an event that would trigger a function
e.g. data-action:{event:"onClick",action:"container.setPosition",params:[10,10]}

Server
0. Ability to upload HTML and PDF files to the Server 
   - PDF files will be converted to HTML by the Server
   - then sanitized to remove all script forms
0. Uploaded HTML data will be then processed by a headless browser
    :open file
    :connect to prezzo
    :create container for data
    :beam over contents to server (so it gets persisted)

0. Filter out all forms of scripts from beamed html
1. Socket management
2. Persisting presentation to file (DONE)
 2.2 - Load presentations from file
 2.3 - Beam presentations to new joiners (should be done via HTML rather than socket.io events)
---------------------------------------------------------------------
- Roles & Permissions system per prezzo & object 
- Joining & Reloading presentation downloads the generated html file




Server
HTTP Server -------- Users
                        persistence --- Persister (interface)
                                        - FilePersister (impl)
                                        - DbPersister (impl)
                        Authorisation

(IO Server) -------- Presentation Manager (Controller)
                        [] Presentation (Controller)
                            id
                            users
                            persistence   ---- Persister (interface)
                                                - FilePersister (impl)
                                                - SqlitePersister (impl)
                                                - etc

                            permissions   ---- Authorization Engine

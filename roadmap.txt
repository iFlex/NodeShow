Client Features:
1.  Create, Delete content containers (via: UI & keyboard)
2.  Move, Size,  [[maybe: Rotate
3.  Text Edit (via: Keyboard & UI)
4.  Group (drag on screen to create a new parent for the captured elements) ::container.grouping
5.  Select (drag on screen to select containers) ::container.select
6.  Change Ownership (change parent to grandparent or sibling) ::container.lineage
7.  Style Container  (shape, color, border, etc) ::container.style [CRUDE]
8   Copy/Paste within presentation and accross presentations ::container.clipboard
9   Content Insertion (img, video, svg, etc) ::container.content (works for images)
10  Display Order Change & Sibling Order Change
11  (Summarisation) Abstract away complexity. [PROBS_MOST_IMPORTANT] 
    A means of sumarizing a container's content by making it much smaller and displaying a summary of what it contains. 
    => Collapsing should be done in levels/stages.
    e.g. content -> levels 1     -> levels 2  -> levels 3      -> levels 4
                    Ample note 1    note 1     note 1/Title    small icon
                    Ample note 2    note 2
                    Ample note 3
        state: tracks at what levels of 'summarisation' the container is at
               if you want to summarise futher, you summarise based on the previous levels. The first levels being the full content of the container.
        [TODO]: add another save style trigger for the per layer style persistance (if you change the dimensions of the container and never change abstraction levels it won't save the changes)

12  Configure Container: (order as sibling, child style, positioning, etc):: container.configure
------------------------------------------------------------------------------
16. Optimize event sending and heavy loading (e.g. books)
    Implement BulkBridge maybe?
13  [IN_PROGRESS] !Link Containers ::container.link
Link are currently a performance issue - they seem to slow down the server
    - [DONE] create links
    - [DONE] persist / load / maintain links
    - delete links (delete any linkUnit should cause the whole link to be deleted)
    - edit links
    - interact with links
    - optimize drawing: stop sending update events on every link unit, let the client do the redrawing
15. Camera implementation: focus, move, zoom
     - integrate zoom level with sizing (i.e. fitContent) + check if read and write style works under zoom
14. [NICE-TO-HAVE|MAYBE-TOO-MUCH]Edit container actions: allow attaching and detaching actions from containers. This way you can attach actions that don't take effect as you edit!?
--------------------------------------------


Current Prios:
--------------------------------------------
[TODO][L]*: Reduce reliance on update on core composeOn methods. Rather than tied to udpate, tie them to more specific events
    - find a way to figure out what an update changed => so downstreams can decide if they act on it or not
    - find a way to push relevant events for depending core listeners: action attacher, permissions, etc

[TODO][M]: Cascade up edit actions perfecting:
    - editPos should correctly position the element even if the drag starts on a inner child that can't be moved
    - editSize should correcly size the parent
[TODO][L]: build a better abstraction/summarisation editor.
    - current one is a hack anyway
[TODO][S]: Figure out how to tippy toe around saving information about the presentation root.
    - system shouldn't be saving any info on the root to allow loading a presentation in any other NodeShow configuration
    - better root referencing rules need to apply
    - also figure out if we really need a static lookup method in Container.lookup (currently removed, might have broken stuff)

[TODO][L]: ensure large payloads aren't being sent via the SocketIO system. Offload via HTTP server and REST application
    - events that are too large will cause a transport error in SocketIO
    
[TODO][L]: overhaul the mouse system - currently it is disgustingly coupled with container features.
    - move stuff like findActionableAncestor outside of mouse functionality
[TODO][S/M]: !! Harden positioning & sizing + add page based tests for it.
[TODO][S]: ! Harden fitVisibleContent - add page based tests for it.
[TODO][M]: Container core should throw exception if callerId not passed (Container, sizing, sumarization, reference, etc)
[TODO][M]: Go through all event Container Core functions that should emit events:
            - ensure they emit their respective events (to fix problems with persistence)
            - And an option to not emit events
[TODO][L]: Evaluate how many events are fired via using Container Core features. Try to minimize without impacting persistence
[TODO][M]*: Tidy up LiveBridge & make it compact events before sending: this should happen via compacting queue.
[TODO][?]: Ability to set URL refrence to a local container and when clicked reveal (unearth it from abstraction levels) it & focus on it.(or container from a different NodeShow)
[TODO][M]: Evolve color picker to allow picking color palettes, creating a palettes, etc.

[TODO]: Zoom level affects positioning. Decide if you'll recursively calculate abs pos for every input event, or continue relying on pageX, pageY + find a way to deal with zoom levels. Maybe don't worry about nested cameras just yet?
    - [DECISION]: do not support nested cameras

[TODO][TEXT_EDITOR]: Top of text and bottom of text padding edit
[TODO][TEXT_EDITOR]: paragraph spacing
[TODO][TEXT_EDITOR]: line left and right spacing
[TODO][TEXT_EDITOR]: support for line wrapping
[TODO][TEXT_EDITOR]: configurable auto sizing of the text box.
                    - if there's overflow and fitContent fails, then break line
[TODO][TEXT_EDITOR]: Text is rendered differently on each device. Sized divs may have overflowing text on different platforms
[SHOULD-FIX][TEXT_EDITOR]: fix forward deletion

[TODO]: support auto values for height and width. E.g. if you set width:auto then it will fit static content? & maybe implement content fit on child add and remove?
     -> set rules of how this should work.
     -> maybe we don't need a fitContent function to be integrated in core but rather offered on demand + good integration with width:auto/inherit height:same

[TODO]: Decouple input interfaces from nodeshow.js instance of container
        - needs event separation (currently all events are listened for via document, they should be listened for via container.parent)

[TODO][]: Determine if content in abstraction level > 0 should be allowed to be abstracted.

[TODO][L]*: performance review the volume of events being sent by the presentation: especially by link maintenance

[0. MUST-HAVE][XL]: Standardize Core. Add Tests [IN_PROGRESS]. Document [IN_PROGRESS]
    - this should allow me to leave the project unattended for longer and work on other stuff as well.
 
[TODO][M]: Integrate user feedback in relevant apps

[TODO][FIX]: Broadcasting abstraction level stats. Currently broken:
    . all works well with no collaborators
    . when more collaborators are added, an event inifinte loop appears

[TODO]: tests for InputAccessManager access granting
 
[DONE]: STRESS TEST:: 100 Nodes, 1K Nodes, 10K Nodes, 100K Nodes, 1M Nodes
    1K Nodes were problematic: found out that the storage layer was the main slowdown.
    Without sending updates to storage, it can handle 1K ev/s
    [TODO]: more stress testing

[TODO]: Move findActionableAncestor call from mouse() into the relevant components
[TODO]: Work on solid encoding interpretation on content from server
[TODO][L]: copy/paste style only
[TODO]: make insert content via data b64 link work
[SHOULD-HAVE]: implement undo/redo
[ISSUE]: copy/pasting links will not translate IDs in their descriptors. Needs fix
[SHOULD-HAVE]: load presentations via HTML rather than event stream. Large prezzos will slow down the server. Or use shadow-dom with events

[NICE-TO-HAVE]: clone an existing NodeShow using server side UI
[NICE-TO_HAVE]: resize selection? is it really needed?
[TODO]: add oAuth & roles for users. Robots should be configurable - currently using hardcoded PSK
[NICE-TO-HAVE][MAYBE]: consider using socket.io volatile (udp style packets). Since the system can handle creation out of order:
    * very high event rates will cause the updates to slow down and lag
-----------------------------------------------------------------------
- [must have] Proper Authentication
- [nice to have] Create Aligner
- [nice to have] Minimap
- [nice to have] Collaborators & Follow
- [nice to have] Drawer app
- [nice to have] should be allowed to add container actions that trigger only in presentation mode or on preview.
- [check - i think we have this now][should consider] Consider having local and global permissions. Local don't get propagated to others or persisted, global are persisted and propagated.

Current purpose:
[OK] Serve as a view controller for my newsstand application. It receives updates in the form of HTML news bits which will get displayed on screen & presisted for later view.
[MEH] Create interactive cards (christmas, new year, birthday, etc)
Import HTML pages and edit them - used to take notes and abstract away detail in books / articles / etc

Next Purpose:
Create Spatial documents / diagrams. E.g. Take DnD notes. Diagram a System
 -> make easy 2D rectangular diagrams with auto width/height and positioning
 -> make it mix easily with absolute positioning

Stretch purpose:
Create 'living' diagrams (that can update themselves with status information)
or even intaractive dashboards?
Don't know for sure yet if this is feasable... (there are existing tools for such things already)

For links:
https://www.smashingmagazine.com/2018/05/svg-interaction-pointer-events-property/
Use one big SVG?

SERVER
----------------------------------------
![todo] add roles and integrate robot (for mfs-news-stand)
![todo] properly integrate user authentication & authorization
 ::crude auth integrated in HTTP side
   - integrate AUTH in socket side (enforce)
   - store passwords securely
   - add cookie expiration
   - update cookie expiration with each verify
![todo] ratelimit/user & size limit uploads to server
[todo]0. Ability to upload HTML and PDF files to the Server 
   - PDF files will be converted to HTML by the Server
   - then sanitized to remove all script forms
[todo]0. Uploaded HTML data will be then processed by a headless browser
    :open file
    :connect to prezzo
    :create container for data
    :beam over contents to server (so it gets persisted)

[todo]0. Optimize serving content: e.g. blob, static content, etc. Currently searching for this content folder by folder.
[nice-to-have]: maybe use a framwork for the frontend like Angular. Something that won't be as manual as the vanilla JS in the UI

[todo]: set cache times on resources
[todo]: simplify endpoints to not need .html extension
[todo]: collect performance metrics?

0. Filter out all forms of scripts from beamed html
1. Socket management
2. Persisting presentation to file (DONE)
 2.2 - Load presentations from file
 2.3 - Beam presentations to new joiners (should be done via HTML rather than socket.io events)
---------------------------------------------------------------------
- Roles & Permissions system per prezzo & object 
- Joining & Reloading presentation downloads the generated html file




Server
HTTP Server -------- Users
                        persistence --- Persister (interface)
                                        - FilePersister (impl)
                                        - DbPersister (impl)
                        Authorisation

(IO Server) -------- Presentation Manager (Controller)
                        [] Presentation (Controller)
                            id
                            users
                            persistence   ---- Persister (interface)
                                                - FilePersister (impl)
                                                - SqlitePersister (impl)
                                                - etc

                            permissions   ---- Authorization Engine


Performance Notes:
mouseMove as of current implementation:
Avg handler duration: 3.5ms
MouseMove frequency: max 50hz





fitContentRules:
/* 1. DESCRIPTIVE */
width: 300px;
width: 25em;

/* 2. RELATIVE */
width: 75%;

/* 3. CONTENT DETERMINED */
width: fit-content(20em);
width: auto;

???
/* Global values */
width: max-content;
width: min-content;
width: inherit;
width: initial;
width: revert;
width: unset;


if at least one:
    1. -> compute and set
    3. -> compute and set (assuming content is present inside)

if only of type:
    1. -> compute and set
    2. -> do nothing
    3. -> set to auto

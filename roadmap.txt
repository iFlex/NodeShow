Client Features:
1.  Create, Delete content containers (via: UI & keyboard)
2.  Move, Size,  [[maybe: Rotate
3.  Text Edit (via: Keyboard & UI)
4.  Group (drag on screen to create a new parent for the captured elements) ::container.grouping
5.  Select (drag on screen to select containers) ::container.select
6.  Change Ownership (change parent to grandparent or sibling) ::container.lineage
7.  Style Container  (shape, color, border, etc) ::container.style [CRUDE]
8   Copy/Paste within presentation and accross presentations ::container.clipboard
9   Content Insertion (img, video, svg, etc) ::container.content (works for images)
10  Display Order Change
11  Abstract away complexity. [PROBS_MOST_IMPORTANT] 
    A means of sumarizing a container's content by making it much smaller and displaying a summary of what it contains. 
    => Collapsing should be done in levels/stages.
    e.g. content -> levels 1     -> levels 2  -> levels 3      -> levels 4
                    Ample note 1    note 1     note 1/Title    small icon
                    Ample note 2    note 2
                    Ample note 3
        state: tracks at what levels of 'summarisation' the container is at
               if you want to summarise futher, you summarise based on the previous levels. The first levels being the full content of the container.
12  Configure Container: (order as sibling, child style, positioning, etc):: container.configure
    [TODO]: make it a bit more advanced: e.g. read status from target, show sliders, etc?
------------------------------------------------------------------------------
13  [IN_PROGRESS] !Link Containers ::container.link
    - [DONE] create links
    - [DONE] persist / load / maintain links
    - delete links (delete any linkUnit should cause the whole link to be deleted)
    - edit links
    - interact with links
--------------------------------------------


Current Prios:
--------------------------------------------
[BUG]: bug in InputAccessManager when granting permissions, for a while it routes events to two receivers rather than just one.

[TODO]: support auto values for height and width. E.g. if you set width:auto then it will fit static content? & maybe implement content fit on child add and remove?
     -> set rules of how this should work.
[TODO]: Implement functionality to make container fit content (including abs pos content)
 - without harming non positioned elements? (can it be done?)
 : currently a shitty but relatively working implementation exists

[TODO]: Decouple input interfaces from nodeshow.js instance of container
        - needs event separation (currently all events are listened for via document, they should be listened for via container.parent)

[TODO]: Make color picker with contrast and color profiles that can be used by any other app

[TODO]: Accomodate multiple Mouse & Touch instances for the same applicationId. Currently breaks pretty badly (affects routing of events)

[TODO][L]: Editing container at abstraction level should apply to abstraction level not root content.

[TODO][L]: make text editor ignore invisible divs.

[TODO][]: Determine if content in abstraction level > 0 should be allowed to be abstracted.

[3. TODO][L]: evaluate event firing and how it should be done
[4. TODO][L]: performance review the volume of events being sent by the presentation: especially by link maintenance

[TODO]: go through all event emitting functions and add an option to not emit events
[0. MUST-HAVE][XL]: Standardize Core. Add Tests [IN_PROGRESS]. Document [IN_PROGRESS]
    - this should allow me to leave the project unattended for longer and work on other stuff as well.

[2. TODO][M]: standardize how things are persisted. 
! Any metadata about an object that is not mutated very frequently shall be stored in the dataset. This allows the current system to persist it by default without code change and requires registering a hook for loading from dataset whenever necessary
e.g. Permissions, Actions, etc. 

[TODO][L]: Standardize hook system. Needs to be less abiguous with its rules for what parameters are passed and what aren't and what the setter name represents
[TODO][M]: Integrate user feedback in relevant apps

[TODO][FIX]: Broadcasting abstraction level stats. Currently broken:
    . all works well with no collaborators
    . when more collaborators are added, an event inifinte loop appears

[TODO]: tests for InputAccessManager access granting
 
[BUG/NOT_SURE]: findActionableContainer prevents clicking on position locked elements 

[DONE]: STRESS TEST:: 100 Nodes, 1K Nodes, 10K Nodes, 100K Nodes, 1M Nodes
    1K Nodes were problematic: found out that the storage layer was the main slowdown.
    Without sending updates to storage, it can handle 1K ev/s
    [TODO]: more stress testing

[TODO]: implement component to visualise abstraction levels
[FIX?]: [CORE] .getPosition to take borders and margins into account. Should it?
[TODO]: Text eitor interface improvements: pick font, size update, prettify
[TODO]: Move findActionableAncestor call from mouse() into the relevant components
[TODO]: Revise and make robust Mouse & Keyboard
[TODO]: Work on solid encoding interpretation on content from server
[TODO]: grouper color selection. pick color in a smart way rather than just black
[TODO][L]: copy/paste style only (via context menu)
[TODO]: Text is rendered differently on each device. Sized divs may have overflowing text on different platforms
[TODO]: make insert content via data b64 link work
[SHOULD-HAVE]: implement undo/redo
[TODO]: investigate slow load time
[TODO]: fix all exceptions caused at load time. There should be none
[BUG]: fix resize to preserve ratio again. Keyboard needs fixin for that
[BUG]: Lineage component is a bit buggy and can even cause disappearences
[BUG]: Repell component sometimes goes beserk, interface gets moved
[BUG]: incorrectly deleting a selection can cause the selector app to stop working and sometimes moves some of the prev selected items into document.body from container.root ?!?
[BUG]: Some component causes containers to disappear... not sure which fakin' one... but it's making it unusable
       - Suspicion: it has to do with the fact that mouse allows clicking on parent
[SHOULD-HAVE][M]: Make container.edit.style and container.config settings apply to newly created containers? (currently doing that for borders and colour)

[SHOULD-HAVE][L]: copy/paste triggered via context menu. (copy and cut works, paste doesn't)
[SHOULD-HAVE][CORE] when creating within a parent, or changing parents - have the child conform to parent rules by default. Currently applied on creation, not parent change yet 
(e.g. respect parent stylign suggestionts)

[SHOULD-HAVE]: load presentations via HTML rather than event stream. Large prezzos will slow down the server. Or use shadow-dom with events

[NICE-TO-HAVE]: clone an existing NodeShow using server side UI
[NICE-TO_HAVE]: resize selection? is it really needed?
[NICE-TO-HAVE]: set width, height, position to exact values ? maybe? 
[SHOULD-FIX][TEXT_EDITOR]: fix forward deletion
[TODO]: add oAuth & roles for users. Robots should be configurable - currently using hardcoded PSK
[NICE-TO-HAVE][MAYBE]: consider using socket.io volatile (udp style packets). Since the system can handle creation out of order:
    * very high event rates will cause the updates to slow down and lag

[BUG]: Interfaces can get burried under content. (not critical: reload fixes it)
 - tentative fix via listening for container created events. Should probably listen to bring to front as well
 - better fix: put all non modal interaces in the same parent container that allows them to stack + keeps them on top
[TODO]: consolidate all keyboard shortcuts and ensure they work
-----------------------------------------------------------------------
- [must have] Proper Authentication
- [nice to have] Create Aligner
- [nice to have] Minimap
- [nice to have] Collaborators & Follow
- [should consider] Consider having local and global permissions. Local don't get propagated to others or persisted, global are persisted and propagated.
- [nice to have] should be allowed to add container actions that trigger only in presentation mode or on preview.

Current purpose:
[OK] Serve as a view controller for my newsstand application. It receives updates in the form of HTML news bits which will get displayed on screen & presisted for later view.
[MEH] Create interactive cards (christmas, new year, birthday, etc)

Next Purpose:
Create Spatial documents / diagrams. E.g. Take DnD notes. Diagram a System

Stretch purpose:
Create 'living' diagrams (that can update themselves with status information)
or even intaractive dashboards?
Don't know for sure yet if this is feasable... (there are existing tools for such things already)


SERVER
----------------------------------------
![todo] add roles and integrate robot (for mfs-news-stand)
![todo] properly integrate user authentication & authorization
 ::crude auth integrated in HTTP side
   - integrate AUTH in socket side (enforce)
   - store passwords securely
   - add cookie expiration
   - update cookie expiration with each verify
![todo] ratelimit/user & size limit uploads to server
[todo]0. Ability to upload HTML and PDF files to the Server 
   - PDF files will be converted to HTML by the Server
   - then sanitized to remove all script forms
[todo]0. Uploaded HTML data will be then processed by a headless browser
    :open file
    :connect to prezzo
    :create container for data
    :beam over contents to server (so it gets persisted)

[todo]0. Optimize serving content: e.g. blob, static content, etc. Currently searching for this content folder by folder.
[nice-to-have]: maybe use a framwork for the frontend like Angular. Something that won't be as manual as the vanilla JS in the UI

0. Filter out all forms of scripts from beamed html
1. Socket management
2. Persisting presentation to file (DONE)
 2.2 - Load presentations from file
 2.3 - Beam presentations to new joiners (should be done via HTML rather than socket.io events)
---------------------------------------------------------------------
- Roles & Permissions system per prezzo & object 
- Joining & Reloading presentation downloads the generated html file




Server
HTTP Server -------- Users
                        persistence --- Persister (interface)
                                        - FilePersister (impl)
                                        - DbPersister (impl)
                        Authorisation

(IO Server) -------- Presentation Manager (Controller)
                        [] Presentation (Controller)
                            id
                            users
                            persistence   ---- Persister (interface)
                                                - FilePersister (impl)
                                                - SqlitePersister (impl)
                                                - etc

                            permissions   ---- Authorization Engine




From making Don's christmas card:
* change ownership of elements
* change container actions per element
* find out containerIDs
* change permissions on container
* !change draw order of containers!

Most annoying:
containers kept disappearing randomly - setting me back
server persist failed without feedback on screen. e.g. couldn't import beteala.png at all - setting me back
couldn't change display order (had to edit json) - setting me back
couldn't change actions (had to edit json) - setting me back


Performance Notes:
mouseMove as of current implementation:
Avg handler duration: 3.5ms
MouseMove frequency: max 50hz
